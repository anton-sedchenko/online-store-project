const axios = require('axios');
const {
    Order,
    OrderFigure,
    CartFigure,
    Figure,
    User
} = require('../models/models');
const ApiError = require('../error/ApiError');

const TELEGRAM_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

class OrderController {
    async createOrder(req, res, next) {
        try {
            // —è–∫—â–æ —Ç–æ–∫–µ–Ω –±—É–≤, —Ç–æ –≤ optionalAuth –≤—ñ–Ω –ø–æ–ø–∞–≤ req.user.id
            const userId = req.user?.id || null;
            const {
                fullName,
                tel,
                email,
                comments,
                order       /* –º–∞—Å–∏–≤ –ø–æ–∑–∏—Ü—ñ–π (id, quantity...) */
            } = req.body;

            if (!order?.length) {
                return next(ApiError.badRequest('–ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è'));
            }

            // –°—Ç–≤–æ—Ä—é—î–º–æ —Å–∞–º–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑ —É—Å—ñ–º–∞ –ø–æ–ª—è–º–∏ –≤ —Ç–∞–±–ª–∏—Ü—ñ
            const newOrder = await Order.create({
                userId,  // –∞–±–æ null —è–∫—â–æ —é–∑–µ—Ä –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π
                fullName,
                tel,
                email,
                comments
            });

            // –î–æ–¥–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—ó
            for (const item of order) {
                // —É –≥–æ—Å—Ç—è –≤ item.id –ª–µ–∂–∏—Ç—å id —Ñ—ñ–≥—É—Ä–∫–∏ –¥–æ–¥–∞—î–º –π–æ–≥–æ,
                // —â–æ–± –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–ª–∞–º–∞–ª–∏—Å—å —á–µ—Ä–µ–∑ –ø–æ—Ä–æ–∂–Ω—î –ø–æ–ª–µ
                const figureId = item.figureId ?? item.id;
                await OrderFigure.create({
                    orderId: newOrder.id,
                    figureId,
                    quantity: item.quantity
                });
            }
            // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ª–æ–≥—ñ–Ω–µ–Ω–∏–π –æ—á–∏—â–∞—î–º–æ –∫–æ—à–∏–∫
            if (userId) {
                await CartFigure.destroy({where: {cartId: userId}});
            }

            const orderItems = await OrderFigure.findAll({
                where: {orderId: newOrder.id},
                include: [{model: Figure, attributes: ["name", "price", "code"]}]
            });

            let text = `üÜï *–ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è #${newOrder.id}*\n`;
            text += `üë§ –Ü–º º—è: ${fullName}\n`;
            text += `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${tel}\n`;
            text += `‚úâÔ∏è Email: ${email}\n`;
            if (comments) text += `üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: ${comments}\n`;
            text += `\nüõí *–¢–æ–≤–∞—Ä–∏:*\n`;
            orderItems.forEach((oi, idx) => {
                const name  = oi.figure.name;
                const qty   = oi.quantity;
                const price = oi.figure.price;
                const code = oi.figure.code;
                text += `${idx + 1}. –ê—Ä—Ç–∏–∫—É–ª: ${code} ${name} ‚Äî ${qty}√ó${price}‚Ç¥ = ${qty * price}‚Ç¥\n`;
            });

            try {
                await axios.post(
                    `https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage`,
                    {
                        chat_id: TELEGRAM_CHAT_ID,
                        text: text,
                        parse_mode: 'Markdown'
                    }
                );
            } catch (tgErr) {
                console.error('Telegram send error:', tgErr.message);
            }

            return res.status(201).json({
                message: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ',
                orderId: newOrder.id,
                fullName, tel, email, comments
            });
        } catch (e) {
            console.error('üí• createOrder crashed:', e);
            next(ApiError.internal(e.message));
        }
    }

    // –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–º–æ–≤–ª–µ–Ω—å –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    async getMyOrders(req, res, next) {
        try {
            const userId = req.user.id;
            const orders = await Order.findAll({
                where: {userId},
                include: [{
                    model: OrderFigure,
                    include: [{model: Figure}]
                }]
            });
            return res.json(orders);
        } catch (e) {
            next(ApiError.internal(e.message));
        }
    }

    // –ü–µ—Ä–µ–≥–ª—è–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è (–ª–∏—à–µ —Å–≤–æ–≥–æ –∞–±–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä.)
    async getOneOrder(req, res, next) {
        try {
            const {id} = req.params;
            // —à—É–∫–∞—î–º–æ –≤ —Ç–∞–±–ª–∏—Ü—ñ orders —Ä—è–¥–æ–∫ –∑ id, —è–∫–∏–π –º–∏ –æ—Ç—Ä–∏–º–∞–ª–∏.
            // –æ–¥–Ω–æ—á–∞—Å–Ω–æ –ø—ñ–¥—Ç—è–≥—É—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Å–∏ –∑ order_figures, —É —è–∫–∏—Ö orderId = id
            // –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑ –Ω–∏—Ö —á–µ—Ä–µ–∑ –≤–∫–ª–∞–¥–µ–Ω–∏–π include —Ç–∞–∫–æ–∂ —Ç—è–≥–Ω–µ–º–æ –∑ figures –¥–∞–Ω—ñ –ø—Ä–æ —Å–∞–º —Ç–æ–≤–∞—Ä
            // —â–æ–± —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –º–∞–ª–∏—Å—è –Ω–∞–∑–≤–∞, —Ü—ñ–Ω–∞, –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            const order = await Order.findOne({
                where: {id},
                include: [{
                    model: OrderFigure,
                    include: [{model: Figure}]
                }]
            });
            if (!order) return next(ApiError.badRequest('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'));
            return res.json(order);
        } catch (e) {
            next(ApiError.internal(e.message));
        }
    }

    // GET /api/order/all ‚Äî –≤—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞
    async getAllOrders(req, res, next) {
        try {
            const orders = await Order.findAll({
                // –ü—ñ–¥—Ç—è–≥—É—î–º–æ –æ–¥—Ä–∞–∑—É —ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ —Ç–æ–≤–∞—Ä–∏ –≤ –∫–æ–∂–Ω–æ–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ
                include: [
                    { model: User, attributes: ['id', 'email']}, // –æ–±–º–µ–∂—É—î–º–æ –ø–æ–ª—è —é–∑–µ—Ä–∞ –≤—ñ–¥ –ø–∞—Ä–æ–ª—ñ–≤
                    {
                        model: OrderFigure,
                        include: [{model: Figure}]
                    }
                ],
                order: [['createdAt', 'DESC']] // —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –¥–∞—Ç–æ—é
            });
            return res.json(orders);
        } catch (e) {
            next(ApiError.internal(e.message));
        }
    }
}

module.exports = new OrderController();
