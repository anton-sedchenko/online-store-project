const {Product} = require('../models/models');
const ApiError = require('../error/ApiError');
const cloudinary = require('../utils/cloudinary');
const slugify = require('slugify');

class ProductController {
    async getBySlug(req, res, next) {
        const {slug} = req.params;
        const product = await Product.findOne({where: {slug}});
        if (!product) return next(ApiError.notFound('–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'));
        return res.json(product);
    }

    async create(req, res, next) {
        try {
            if (!req.files || !req.files.img) {
                return res.status(400).json({message: '–§–∞–π–ª –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π'});
            }

            let {name, price, typeId, description, code} = req.body;

            if (!code) {
                return next(ApiError.badRequest('–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –∫–æ–¥ —Ç–æ–≤–∞—Ä—É'));
            }

            const {img} = req.files;
            const result = await cloudinary.uploader.upload(img.tempFilePath, {
                folder: 'products',
            });

            const slug = slugify(name, {lower: true, strict: true}) + '-' + code;
            const newProduct = await Product.create({
                name,
                slug,
                price,
                typeId,
                description,
                code,
                img: result.secure_url,
            });

            return res.json(newProduct);
        } catch (e) {
            next(ApiError.internal("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É"));
        }
    }

    async update(req, res, next) {
        try {
            const {id} = req.params;
            let {name, price, typeId, description, code} = req.body;
            const product = await Product.findByPk(id);
            if (!product) return next(ApiError.badRequest(`–¢–æ–≤–∞—Ä ${id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π`));

            // —è–∫—â–æ –ø—Ä–∏–π—à–æ–≤ —Ñ–∞–π–ª - –æ–Ω–æ–≤–ª—é—î–º–æ –∫–∞—Ä—Ç–∏–Ω–∫—É
            if (req.files?.img) {
                const {img} = req.files;
                const result = await cloudinary.uploader.upload(img.tempFilePath || img.path, {
                    folder: 'products',
                });
                product.img = result.secure_url;
            }

            // –æ–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—à—ñ –ø–æ–ª—è
            if (name) product.name = name;
            if (code) product.code = code;
            if (name || code) {
                product.slug = slugify(product.name, {lower: true, strict: true}) + '-' + product.code;
            }
            if (price) product.price = price;
            if (typeId) product.typeId = typeId;
            if (description !== undefined) product.description = description;

            await product.save();
            return res.json(product);
        } catch (e) {
            next(ApiError.internal(e.message));
        }
    }

    async getAll(req, res, next) {

        // —à—É–∫–∞—î–º –±–∞–≥
        console.log("üì• getAll query:", req.query);
        
        try {
            let {typeId, limit, page} = req.query;
            page = page || 1;
            limit = limit || 9;
            let offset = page * limit - limit;
            let products;

            if (typeId) {
                products = await Product.findAndCountAll({where: {typeId}, limit, offset});
            } else {
                products = await Product.findAndCountAll({limit, offset});
            }

            return res.json(products);
        } catch (e) {
            next(ApiError.internal('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤'));
        }
    }

    async getOne(req, res) {
        const {id} = req.params;
        const product = await Product.findByPk(id);
        return res.json(product);
    }

    async deleteProduct(req, res, next) {
        try {
            const {id} = req.params;
            const product = await Product.findByPk(id); // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤ –ë–î –æ–±'—î–∫—Ç —Ñ—ñ–≥—É—Ä–∫–∏
            if (!product) {
                return next(ApiError.badRequest(`–¢–æ–≤–∞—Ä –∑ id=${id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π`));
            }
            await Product.destroy({where: {id}});
            return res.json({message: `–¢–æ–≤–∞—Ä id=${id} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π`});
        } catch (e) {
            next(ApiError.internal(e.message));
        }
    }
}

module.exports = new ProductController();
