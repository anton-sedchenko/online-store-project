const {Product} = require('../models/models');
const ApiError = require('../error/ApiError');
const {cloudinary, extractPublicId} = require('../utils/cloudinary');
const slugify = require('slugify');
const {ProductImage} = require('../models/models');

class ProductController {
    async getBySlug(req, res, next) {
        const {slug} = req.params;
        const product = await Product.findOne({
            where: {slug},
            include: [{association: 'images'}]
        });
        if (!product) return next(ApiError.notFound('–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'));
        return res.json(product);
    }

    async create(req, res, next) {
        try {
            if (!req.files || !req.files.img) {
                return res.status(400).json({message: '–§–∞–π–ª –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π'});
            }

            let {name, price, typeId, description, code} = req.body;

            if (!code) {
                return next(ApiError.badRequest('–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –∫–æ–¥ —Ç–æ–≤–∞—Ä—É'));
            }

            const {img} = req.files;
            const result = await cloudinary.uploader.upload(img.tempFilePath, {
                folder: 'products',
            });

            const slug = slugify(name, {lower: true, strict: true}) + '-' + code;
            const newProduct = await Product.create({
                name,
                slug,
                price,
                typeId,
                description,
                code,
                img: result.secure_url,
            });

            return res.json(newProduct);
        } catch (e) {
            next(ApiError.internal("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É"));
        }
    }

    async update(req, res, next) {
        try {
            const {id} = req.params;
            let {name, price, typeId, description, code} = req.body;
            const product = await Product.findByPk(id);
            if (!product) return next(ApiError.badRequest(`–¢–æ–≤–∞—Ä ${id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π`));

            // —è–∫—â–æ –ø—Ä–∏–π—à–æ–≤ —Ñ–∞–π–ª - –æ–Ω–æ–≤–ª—é—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            if (req.files?.img) {
                const {img} = req.files;
                const result = await cloudinary.uploader.upload(img.tempFilePath || img.path, {
                    folder: 'products',
                });
                product.img = result.secure_url;
            }

            // üÜï —è–∫—â–æ –ø—Ä–∏–π—à–ª–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ–æ—Ç–æ ‚Äî –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —ó—Ö
            const images = req.files?.images;
            if (images) {
                const filesArray = Array.isArray(images) ? images : [images];
                for (const file of filesArray) {
                    const result = await cloudinary.uploader.upload(file.tempFilePath || file.path, {
                        folder: 'products',
                    });
                    await ProductImage.create({
                        url: result.secure_url,
                        productId: product.id,
                    });
                }
            }

            // –æ–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—à—ñ –ø–æ–ª—è
            if (name) product.name = name;
            if (code) product.code = code;
            if (name || code) {
                product.slug = slugify(product.name, {lower: true, strict: true}) + '-' + product.code;
            }
            if (price) product.price = price;
            if (typeId) product.typeId = typeId;
            if (description !== undefined) product.description = description;

            await product.save();
            return res.json(product);
        } catch (e) {
            next(ApiError.internal(e.message));
        }
    }

    async getAll(req, res, next) {
        try {
            let {typeId, limit, page} = req.query;
            page = page || 1;
            limit = limit || 9;
            let offset = page * limit - limit;
            let products;

            if (typeId) {
                products = await Product.findAndCountAll({where: {typeId}, limit, offset});
            } else {
                products = await Product.findAndCountAll({limit, offset});
            }

            return res.json(products);
        } catch (e) {
            next(ApiError.internal('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤'));
        }
    }

    async getOne(req, res, next) {
        try {
            const {id} = req.params;
            const product = await Product.findByPk(id, {
                include: [{association: 'images'}]
            });
            if (!product) return next(ApiError.notFound("–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"));
            return res.json(product);
        } catch (e) {
            next(ApiError.internal(e.message));
        }
    }

    async deleteProduct(req, res, next) {
        try {
            const {id} = req.params;
            const product = await Product.findByPk(id, {include: [{association: 'images'}]});
            if (!product) {
                return next(ApiError.badRequest(`–¢–æ–≤–∞—Ä –∑ id=${id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π`));
            }

            // –í–∏–¥–∞–ª—è—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ Cloudinary
            for (const image of product.images) {
                const publicId = extractPublicId(image.url);
                if (publicId) {
                    await cloudinary.uploader.destroy(publicId);
                }
            }

            // –í–∏–¥–∞–ª—è—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —è–∫—â–æ —î
            const mainPublicId = extractPublicId(product.img);
            if (mainPublicId) {
                await cloudinary.uploader.destroy(mainPublicId);
            }

            // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Å–∏
            await ProductImage.destroy({where: {productId: id}});
            await Product.destroy({where: {id}});

            return res.json({ message: `–¢–æ–≤–∞—Ä id=${id} —Ç–∞ –≤—Å—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω—ñ` });
        } catch (e) {
            next(ApiError.internal(e.message));
        }
    }

    async addImages(req, res, next) {
        try {
            const {productId} = req.body;
            if (!productId) return next(ApiError.badRequest('–ù–µ –ø–µ—Ä–µ–¥–∞–Ω–æ productId'));

            const product = await Product.findByPk(productId);
            if (!product) return next(ApiError.badRequest('–¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'));

            const files = req.files?.images;
            if (!files) return next(ApiError.badRequest('–§–∞–π–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ñ'));

            const uploaded = [];

            const filesArray = Array.isArray(files) ? files : [files]; // —è–∫—â–æ –æ–¥–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            for (const file of filesArray) {
                const result = await cloudinary.uploader.upload(file.tempFilePath || file.path, {
                    folder: 'products',
                });
                const image = await ProductImage.create({
                    url: result.secure_url,
                    productId: product.id
                });
                uploaded.push(image);
            }

            return res.json(uploaded);
        } catch (e) {
            console.error(e);
            next(ApiError.internal('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω—å'));
        }
    }

    async deleteImage(req, res, next) {
        try {
            const {id} = req.params;
            const image = await ProductImage.findByPk(id);
            if (!image) return next(ApiError.notFound('–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'));

            // –û—Ç—Ä–∏–º—É—î–º–æ public_id –∑ URL —Ç–∞ –≤–∏–¥–∞–ª—è—î–º–æ –∑ –∫–ª–∞—É–¥—ñ–Ω–∞—Ä—ñ
            const publicId = extractPublicId(image.url);
            if (publicId) {
                await cloudinary.uploader.destroy(publicId);
            }

            // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–ø–∏—Å –∑ –ë–î
            await ProductImage.destroy({where: {id}});

            return res.json({message: '–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ'});
        } catch (e) {
            next(ApiError.internal(e.message));
        }
    }
}

module.exports = new ProductController();
